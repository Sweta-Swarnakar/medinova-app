{"ast":null,"code":"import { GET_DOCTOR_FAILURE, GET_DOCTOR_REQ, GET_DOCTOR_SUCCESS, FILTER_DATA, GET_CLICKED_DOCTOR_FAILURE, GET_CLICKED_DOCTOR_REQ, GET_CLICKED_DOCTOR_SUCCESS, SEARCH_TERM } from \"./ActionType\";\nconst initState = {\n  data: [],\n  filteredData: [],\n  isLoading: false,\n  isError: false,\n  selectedData: {}\n};\nexport const Reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  function filterBySearchTerm(arr, term) {\n    term = term.toLowerCase();\n    return arr.filter(person => {\n      return doctors.email.toLowerCase().includes(term) || person.name.toLowerCase().includes(term) || person.role.toLowerCase().includes(term);\n    });\n  }\n\n  switch (type) {\n    case GET_DOCTOR_REQ:\n      return { ...state,\n        isLoading: true\n      };\n\n    case GET_DOCTOR_SUCCESS:\n      return { ...state,\n        isLoading: false,\n        data: [...payload],\n        filteredData: [...payload],\n        isError: false\n      };\n\n    case GET_DOCTOR_FAILURE:\n      return { ...state,\n        isLoading: false,\n        data: [],\n        isError: true\n      };\n\n    case FILTER_DATA:\n      return { ...state,\n        filteredData: state.data.filter(el => {\n          let category = el.Speciality;\n          return category.indexOf(payload) != -1;\n        })\n      };\n\n    case SEARCH_TERM:\n      return { ...state,\n        isLoading: false,\n        isError: false,\n        filteredData: filterBySearchTerm(state.data, payload)\n      };\n\n    case GET_CLICKED_DOCTOR_REQ:\n      return { ...state,\n        isLoading: true\n      };\n\n    case GET_CLICKED_DOCTOR_SUCCESS:\n      return { ...state,\n        isLoading: false,\n        selectedData: payload,\n        isError: false\n      };\n\n    case GET_CLICKED_DOCTOR_FAILURE:\n      return { ...state,\n        isLoading: false,\n        selectedData: {},\n        isError: true\n      };\n\n    default:\n      return state;\n  }\n};\n_c = Reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reducer\");","map":{"version":3,"sources":["C:/Users/Asus/Desktop/apollo/src/Redux/Reducer.js"],"names":["GET_DOCTOR_FAILURE","GET_DOCTOR_REQ","GET_DOCTOR_SUCCESS","FILTER_DATA","GET_CLICKED_DOCTOR_FAILURE","GET_CLICKED_DOCTOR_REQ","GET_CLICKED_DOCTOR_SUCCESS","SEARCH_TERM","initState","data","filteredData","isLoading","isError","selectedData","Reducer","state","type","payload","filterBySearchTerm","arr","term","toLowerCase","filter","person","doctors","email","includes","name","role","el","category","Speciality","indexOf"],"mappings":"AAAA,SAEEA,kBAFF,EAGEC,cAHF,EAIEC,kBAJF,EAKEC,WALF,EAMEC,0BANF,EAOEC,sBAPF,EAQEC,0BARF,EAUEC,WAVF,QAWO,cAXP;AAaA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE,EADU;AAEhBC,EAAAA,YAAY,EAAE,EAFE;AAGhBC,EAAAA,SAAS,EAAE,KAHK;AAIhBC,EAAAA,OAAO,EAAE,KAJO;AAKhBC,EAAAA,YAAY,EAAC;AALG,CAAlB;AAQA,OAAO,MAAMC,OAAO,GAAG,YAA0C;AAAA,MAAzCC,KAAyC,uEAAjCP,SAAiC;AAAA,MAAtB;AAAEQ,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAsB;;AAE/D,WAASC,kBAAT,CAA4BC,GAA5B,EAAiCC,IAAjC,EAAuC;AACrCA,IAAAA,IAAI,GAAGA,IAAI,CAACC,WAAL,EAAP;AACA,WAAOF,GAAG,CAACG,MAAJ,CAAYC,MAAD,IAAY;AAC5B,aACEC,OAAO,CAACC,KAAR,CAAcJ,WAAd,GAA4BK,QAA5B,CAAqCN,IAArC,KACAG,MAAM,CAACI,IAAP,CAAYN,WAAZ,GAA0BK,QAA1B,CAAmCN,IAAnC,CADA,IAEAG,MAAM,CAACK,IAAP,CAAYP,WAAZ,GAA0BK,QAA1B,CAAmCN,IAAnC,CAHF;AAKD,KANM,CAAP;AAOD;;AAED,UAAQJ,IAAR;AACE,SAAKf,cAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELJ,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF,SAAKT,kBAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELJ,QAAAA,SAAS,EAAE,KAFN;AAGLF,QAAAA,IAAI,EAAE,CAAC,GAAGQ,OAAJ,CAHD;AAILP,QAAAA,YAAY,EAAE,CAAC,GAAGO,OAAJ,CAJT;AAKLL,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKZ,kBAAL;AACE,aAAO,EACL,GAAGe,KADE;AAELJ,QAAAA,SAAS,EAAE,KAFN;AAGLF,QAAAA,IAAI,EAAE,EAHD;AAILG,QAAAA,OAAO,EAAE;AAJJ,OAAP;;AAOF,SAAKT,WAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELL,QAAAA,YAAY,EAAEK,KAAK,CAACN,IAAN,CAAWa,MAAX,CAAmBO,EAAD,IAAQ;AACtC,cAAIC,QAAQ,GAAGD,EAAE,CAACE,UAAlB;AACA,iBAAOD,QAAQ,CAACE,OAAT,CAAiBf,OAAjB,KAA6B,CAAC,CAArC;AACD,SAHa;AAFT,OAAP;;AAQA,SAAKV,WAAL;AACA,aAAO,EACL,GAAGQ,KADE;AAELJ,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,OAAO,EAAE,KAHJ;AAILF,QAAAA,YAAY,EAAEQ,kBAAkB,CAACH,KAAK,CAACN,IAAP,EAAaQ,OAAb;AAJ3B,OAAP;;AAOF,SAAKZ,sBAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELJ,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF,SAAKL,0BAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELJ,QAAAA,SAAS,EAAE,KAFN;AAGLE,QAAAA,YAAY,EAAEI,OAHT;AAILL,QAAAA,OAAO,EAAE;AAJJ,OAAP;;AAMF,SAAKR,0BAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELJ,QAAAA,SAAS,EAAE,KAFN;AAGLE,QAAAA,YAAY,EAAE,EAHT;AAILD,QAAAA,OAAO,EAAE;AAJJ,OAAP;;AAMF;AACE,aAAOG,KAAP;AA3DJ;AA6DD,CA1EM;KAAMD,O","sourcesContent":["import {\r\n  \r\n  GET_DOCTOR_FAILURE,\r\n  GET_DOCTOR_REQ,\r\n  GET_DOCTOR_SUCCESS,\r\n  FILTER_DATA,\r\n  GET_CLICKED_DOCTOR_FAILURE,\r\n  GET_CLICKED_DOCTOR_REQ,\r\n  GET_CLICKED_DOCTOR_SUCCESS,\r\n\r\n  SEARCH_TERM\r\n} from \"./ActionType\";\r\n\r\nconst initState = {\r\n  data: [],\r\n  filteredData: [],\r\n  isLoading: false,\r\n  isError: false,\r\n  selectedData:{}\r\n};\r\n\r\nexport const Reducer = (state = initState, { type, payload }) => {\r\n\r\n  function filterBySearchTerm(arr, term) {\r\n    term = term.toLowerCase();\r\n    return arr.filter((person) => {\r\n      return (\r\n        doctors.email.toLowerCase().includes(term) ||\r\n        person.name.toLowerCase().includes(term) ||\r\n        person.role.toLowerCase().includes(term)\r\n      );\r\n    });\r\n  }\r\n\r\n  switch (type) {\r\n    case GET_DOCTOR_REQ:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case GET_DOCTOR_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        data: [...payload],\r\n        filteredData: [...payload],\r\n        isError: false,\r\n      };\r\n    case GET_DOCTOR_FAILURE:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        data: [],\r\n        isError: true,\r\n      };\r\n\r\n    case FILTER_DATA:\r\n      return {\r\n        ...state,\r\n        filteredData: state.data.filter((el) => {\r\n          let category = el.Speciality\r\n          return category.indexOf(payload) != -1;\r\n        }),\r\n      };\r\n\r\n      case SEARCH_TERM:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n        filteredData: filterBySearchTerm(state.data, payload),\r\n      };\r\n\r\n    case GET_CLICKED_DOCTOR_REQ:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case GET_CLICKED_DOCTOR_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        selectedData: payload,\r\n        isError: false,\r\n      };\r\n    case GET_CLICKED_DOCTOR_FAILURE:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        selectedData: {},\r\n        isError: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}